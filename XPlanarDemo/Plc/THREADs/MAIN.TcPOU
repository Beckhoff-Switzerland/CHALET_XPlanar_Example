<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{0d5726c6-96bf-43b9-ad37-581c6a412de7}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	bInitDone 			: BOOL;
	bEnable				: BOOL;
	bDisable, bReset	: BOOL;
	bSetSettings 		: BOOL := TRUE;
	
	(* EtherCAt diagnostics - TC3_Eventlogger
	This function block instance scans the entire EtherCat master. 
	Each EtherCat slave device is recognized and a message is written to the TC3_Eventlogger as soon as an unwanted state occurs.*)
//	fbEtherCatDiagLAN_X1 : FB_EtherCatMasterDiag;
//	fbEtherCatDiagLAN_X2 : FB_EtherCatMasterDiag;
	
	//////////////////////////////////////////////////////////////////////////
	
	(* XPlanar System - 1 per associated XPlanar 
		The system is the container and organizer for all subsequent XPlanar objects. All objects are registered with this system*)
	fbXpSystem : FB_XP_System;
	ipXPlanarPLC : I_XP_System_PLC := fbXpSystem; 
	
	(* XPlanar Collision Avoidance Groupe - 1 per associated XPlanar 
		The Planar group is a software object that prevents collisions between Planar movers as well as collisions of Planar movers with the boundary of 
		the stator area on the two-dimensional XPlanar stator area. To do this, the 2D areas of all objects in the group are blocked. When a motion command 
		is transferred to a mover, the required area is requested from the Planar group and the motion command is rejected if this area would collide 
		with already reserved areas. If the motion command can be executed, the area is added to the set of reserved area and blocked accordingly. *)
	fbXpGroup : FB_XP_Group
									(ipSystem			:= fbXpSystem);
	(* XPlanar Environment - 1 per associated XPlanar 
		The Planar environment is a software object that represents the two-dimensional XPlanar stator surface. Together with Planar movers in a group, 
		it prevents collisions of the movers with the edge of the surface. *)
	fbXpEnvironment : FB_XP_Environment
									(ipSystem			:= fbXpSystem);	
	
	(* XPlanar mover - n per associated XPlanar. Can be instantiated as an array and/or individually
		The Planar mover is a software object that represents an XPlanar mover. It summarizes the state of the real mover (position, velocity, etc.) 
		for the user. In addition, the user has the possibility to influence or control the state of the real mover via the Planar mover. *)								
	aMovers : ARRAY[1..cCtsXpMovers] OF FB_XP_Mover[
								 	(ipSystem			:= fbXpSystem),
								 	(ipSystem			:= fbXpSystem),
								 	(ipSystem			:= fbXpSystem)];
	
	(* XPlanar track - n per associated XPlanar. Can be instantiated as an array and/or individually
		The Planar track is a software object that represents a (virtual) one-dimensional path on the two-dimensional XPlanar stator surface. 
		Several Planar movers can be lined up and moved on this path. Collisions are prevented by keeping a preset distance between the movers. *)		
	fbTrackA 		: FB_XP_Track	(ipSystem 			:= fbXpSystem);	
	fbTrackB 		: FB_XP_Track	(ipSystem 			:= fbXpSystem);	
	fbTrackC 		: FB_XP_Track	(ipSystem 			:= fbXpSystem);	
		
	
	//NEW: Each station can now be optionally linked to a "TcCom Planar Track Object". In this case, the station is displayed in the LiveView. The name is the "sUnigueName"
	//NEW: StationAhead no longer needs to be entered manually. These are now automatically determined when the system is enabling.
	(* XPlanar station - n per associated XPlanar. Can be instantiated as an array and/or individually
		The stations are the main component of the application. As soon as the system has been started up and all movers are on the track, the movers are only sent from one station to the next.
		Parameters:
			xPos, yPos 			= Absolute position of the station on the xPlanar.
			ipAccocietedTrack 	= The track on which the station is located. If the XY position is not on this track, the next possible track position is assumed on this track.
								  Can be set to 0. In this case, the closest track to the coordinates is automatically used. 
								  If the station is very close to a transition, it may still be interesting to enter the exact track here.		
			sUniqueName 		= Unique name that may only exist once.
			sTargetGroup 		= A name for a group to which this station belongs. Important for redundant stations	*)	
	fbStation1 		: FB_XP_Station(ipSystem 			:= fbXpSystem,
									ipAccocietedTrack 	:= 0,
									sUniqueName			:= S_INFEED1,
									sTargetGroup		:= G_INFEED,
									nMoverQueueSize		:= 2,
									xPos				:= 100,
									yPos				:= 360);
		
	//The unique station name or/and the group to which the station belongs may be ''(empty string). 	
	//This can be interesting for waiting or bypass stations.
	//In this case, a unique name is automatically generated in the background.					
	fbStationWaiting : FB_XP_Station(ipSystem 			:= fbXpSystem,
									ipAccocietedTrack 	:= fbTrackA,
									sUniqueName 		:= '',
									sTargetGroup		:= '',
									nMoverQueueSize		:= 3,
									xPos				:= 480,
									yPos				:= 600	);	
							
	fbStation2 		: FB_XP_Station(ipSystem 			:= fbXpSystem,
									ipAccocietedTrack 	:= fbTrackB,
									sUniqueName 		:= S_OUTFEED1,
									sTargetGroup		:= G_OUTFEED,
									nMoverQueueSize		:= 1,
									xPos				:= 480,
									yPos				:= 360);	
		
	fbStation3 		: FB_XP_Station(ipSystem 			:= fbXpSystem,
									ipAccocietedTrack 	:= 0, // =closest track
									sUniqueName 		:= S_OUTFEED2,
									sTargetGroup		:= G_OUTFEED,
									nMoverQueueSize		:= 1,
									xPos				:= 840,
									yPos				:= 360);						
								


END_VAR
VAR CONSTANT
	cCtsXpMovers : UINT := 3;	

	//Unique station identification 
	//Station ID
	S_INFEED1 	: STRING := 'Station Infeed1';
	S_OUTFEED1 	: STRING := 'Station Outfeed1';
	S_OUTFEED2 	: STRING := 'Station Outfeed2';
	
	//Groupe ID
	G_INFEED	: STRING := 'Groupe Infeed';
	G_OUTFEED	: STRING := 'Groupe Outfeed';
END_VAR

//Example ExternalSetpoint Clamp
VAR
	bExternalSetpointExample : BOOL; //Set this variable to run external setpoint example
	nSeqStation1 : UINT;
	ipMover1, ipMover2 : I_XP_Mover_PLC;
END_VAR

//Example ExternalSetpoint MoveToExactStationCoordinates
VAR
	bExternalSetpointExample2 : BOOL; //Set this variable to run external setpoint example
	nSeqStation2 : UINT;
	ipMoverExample2 : I_XP_Mover_PLC;
	fPositionOffsetX, fPositionOffsetY : LREAL;//Target position (position next to track) - Actual position (position on the track)
END_VAR

//Example ConfigTrack
VAR
	bDoConfigTrackC 		: BOOL := TRUE;
	nSeqConfigTrack 		: UINT;
	fbTrackFeedback 		: MC_PlanarFeedback;	
	posStart, posEnd 		: PositionXYC; 
END_VAR

//Example SimulationMode
VAR
	bSimulation : BOOL;
	bStation1_Ready : BOOL := TRUE; 
	bStation2_Ready : BOOL := TRUE;  
	bStation3_Ready : BOOL := TRUE;  
	fbRTriggerSimulation : R_TRIG;
	fbFTriggerSimulation : F_TRIG;
END_VAR

//Example Change dynamic constraint
VAR
	bChangeDynConstraint : BOOL;
END_VAR

//Example Manual Interaction with process outside XPlanar
VAR
	bToUpstreamProcessCanStart 		: BOOL; //Requestet cts of mover are in station. Example: rototer can start to place prodcts
	bFromUpsreamProcessIsFinish 	: BOOL; //The upstream process can set this bool if the process is finish and the mover can leave the station
	sFromUpstreamTagedStation		: STRING; //The Upstream can chose where the movers should go next
END_VAR
	
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInitDone THEN
	bInitDone := ipXPlanarPLC.Initialized;
 	ipXPlanarPLC.Initialize();
	//fbEtherCatDiagLAN_X1.Initialize();
	RETURN;
END_IF


IF bEnable AND ipXPlanarPLC.Disabled THEN
	bEnable := FALSE;
	ipXPlanarPLC.Enable();
END_IF

IF bDisable OR bReset THEN
	bDisable := FALSE; bReset := FALSE;
	ipXPlanarPLC.Disable();
END_IF

(* Set bit to run the examples *)
bSimulation := bSimulation;			//after a given time in the station, the mover is sent to the target station 
bExternalSetpointExample := bExternalSetpointExample; 			//Clamping in Station S_INFEED1
bExternalSetpointExample2 := bExternalSetpointExample2; 		//Leave track and move to exact coordinates of station S_OUTFEED1
bChangeDynConstraint := bChangeDynConstraint;	//The movers have different speeds depending on the section of the route



IF bSetSettings THEN
	bSetSettings := FALSE;
	ipXPlanarPLC.Station(S_OUTFEED1).MoverGapAtExit := 200.0;
	ipXPlanarPLC.Station(S_OUTFEED2).MoverGapAtExit := 200.0;
END_IF



Example_ChangeDynamicConstraint();
Example_ManualConfigTrack();
Example_SimulationMode();
Example_ExternalSetpoint_Clamp();
Example_ExternalSetpoint_MoveToExactStationCoordinates();
Example_ManualInteractionWithProcess();
PRG_Example_ProductData_Simple();


(* Update is called at the end of the program *)
ipXPlanarPLC.Update();
//fbEtherCatDiagLAN_X1.Update();
//fbEtherCatDiagLAN_X2.Update();
]]></ST>
    </Implementation>
    <Method Name="Example_ChangeDynamicConstraint" Id="{0c48dace-8681-4ab7-b111-a1f02d902bb0}">
      <Declaration><![CDATA[METHOD Example_ChangeDynamicConstraint : BOOL
VAR 
	nIdx : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* The dynamic constraints can be changed individually for each mover. 
   In this example, the movers are sent away from the station at a different speed because, 
   for example, the product has been unloaded and faster movements are now possible 
*)

//Set this variable to run this example
IF bChangeDynConstraint THEN
		
	IF ipXPlanarPLC.Station(S_INFEED1).MoversInPlace THEN
		//For all movers in queue
		FOR nIdx:=0 TO (ipXPlanarPLC.Station(S_INFEED1).MoverQueueSize-1) DO
			ipXPlanarPLC.Station(S_INFEED1).MoversInQueue[nIdx].SetDynConstraint_Path(V:= 200, A:= 100, D:= 100, J:= 1000);
		END_FOR
	END_IF	
	
	IF ipXPlanarPLC.Station(S_OUTFEED1).MoversInPlace THEN
		//For all movers in queue
		FOR nIdx:=0 TO (ipXPlanarPLC.Station(S_OUTFEED1).MoverQueueSize-1) DO
			ipXPlanarPLC.Station(S_OUTFEED1).MoversInQueue[nIdx].SetDynConstraint_Path(V:= 1000, A:= MC_MAXIMUM, D:= 500, J:= 1000);
		END_FOR
	END_IF	
	
	IF ipXPlanarPLC.Station(S_OUTFEED2).MoversInPlace THEN
		//For all movers in queue
		FOR nIdx:=0 TO (ipXPlanarPLC.Station(S_OUTFEED2).MoverQueueSize-1) DO
			ipXPlanarPLC.Station(S_OUTFEED2).MoversInQueue[nIdx].SetDynConstraint_Path(V:= 1000, A:= MC_DEFAULT, D:= 500, J:= 1000);
		END_FOR
	END_IF	
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Example_ExternalSetpoint_Clamp" Id="{3b71684e-cfc2-47f8-b3db-50e104f81c75}">
      <Declaration><![CDATA[METHOD Example_ExternalSetpoint_Clamp : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* An external setpoint can be added to the current position for each mover. Even if the mover is on a track or in a station. Even while driving on the track.
   This is particularly useful for working through a sequence in a station. For example: glue application, loading, clamping, mixing,...
   
   For the external setpoint to work, each move in the PLC process image has 6 axes (X,Y,Z,A,B,C) that can be linked to the NC. 
   Only the axes that are actually needed in the application must be linked, the rest may remain unlinked. 
*)

//Set this variable to run external setpoint example
IF bExternalSetpointExample THEN
	//fix 2 Movers are used in example
	ipXPlanarPLC.Station(S_INFEED1).MoverQueueSize := 2;
	//Switch off simulation in Station 1
	ipXPlanarPLC.Station(S_INFEED1).SimulationStart(fProcessDuration := 0, sTargedStation := '');
	
	CASE nSeqStation1 OF	
		0: //Wait for Mover
			IF ipXPlanarPLC.Station(S_INFEED1).MoversInPlace THEN
				//Get interface to mover
				ipMover1 := ipXPlanarPLC.Station(S_INFEED1).MoversInQueue[0];
				ipMover2 := ipXPlanarPLC.Station(S_INFEED1).MoversInQueue[1];
				nSeqStation1 := nSeqStation1 + 1;
			END_IF
			
		1: //Start External Setpoint (Relative Mode). PowerOn all 6 simulationaxis if linked
			ipMover1.StartExternalSetpoint();
			ipMover2.StartExternalSetpoint();
			nSeqStation1 := nSeqStation1 + 1;
		
		2: //Wait for feedback
			IF ipMover1.Feedback.Done AND ipMover2.Feedback.Done THEN
				nSeqStation1 := nSeqStation1 + 1;
			END_IF
			
		
		3: //As example, the 2 movers in the station are geared in the Y-axis with a gear ratio of -1. Axis1 is Master, Axis2 is Slave
			ipMover2.AxisExtSetpointY.GearIn(
				ipMasterAxisAdapter:= ipMover1.AxisExtSetpointY, 
				fRatioNumerator:= -1, //neagative value = invertet direction
				nRatioDenominator:= 1, 
				fAcceleration:= 0, 	//0=default
				fDeceleration:= 0, 	//0=default
				fJerk:=0 );			//0=default
			nSeqStation1 := nSeqStation1 + 1;
			
		4: //Wait for feedback
			IF ipMover2.Feedback.Done THEN
				nSeqStation1 := nSeqStation1 + 1;
			END_IF	
			
		5: //Start to do some movements
			ipMover1.AxisExtSetpointY.MoveRelative(-15,20,0,0,0,0);
			ipMover1.AxisExtSetpointX.MoveRelative(-20,10,0,0,0,0);
			ipMover2.AxisExtSetpointX.MoveRelative(-20,10,0,0,0,0);
			nSeqStation1 := nSeqStation1 + 1;
		
		6: //Wait for finishing movement
			IF ipMover1.AxisExtSetpointY.Feedback.Done AND ipMover1.AxisExtSetpointX.Feedback.Done AND ipMover2.AxisExtSetpointX.Feedback.Done THEN 
				nSeqStation1 := nSeqStation1 + 1;
			END_IF
			
		7: //Start to do some movements
			ipMover1.AxisExtSetpointY.MoveAbsolute(0,20,0,0,0,0);
			ipMover1.AxisExtSetpointX.MoveAbsolute(0,10,0,0,0,0);
			ipMover2.AxisExtSetpointX.MoveAbsolute(0,10,0,0,0,0);
			nSeqStation1 := nSeqStation1 + 1;
		
		8: //Wait for finishing movement
			IF ipMover1.AxisExtSetpointY.Feedback.Done AND ipMover1.AxisExtSetpointX.Feedback.Done AND ipMover2.AxisExtSetpointX.Feedback.Done THEN 
				nSeqStation1 := nSeqStation1 + 1;
			END_IF
			
		9: //Stop external setpoint mode
			ipMover1.StopExternalSetpoint();
			ipMover2.StopExternalSetpoint();
			nSeqStation1 := nSeqStation1 + 1;
			
		10: //Wait for feedback
			IF ipMover1.Feedback.Done AND ipMover2.Feedback.Done THEN
				nSeqStation1 := nSeqStation1 + 1;
			END_IF		
			
			
		11:	//Open gear
			ipMover2.AxisExtSetpointY.GearOut();
			nSeqStation1 := nSeqStation1 + 1;
		
		12: //Wait for feedback
			IF ipMover2.AxisExtSetpointY.Feedback.Done THEN
				nSeqStation1 := nSeqStation1 + 1;
			END_IF					
			
		13: //Finish. Send Mover in next Station
			ipXPlanarPLC.Station(S_INFEED1).SendMoversToStation(G_OUTFEED);
			nSeqStation1 := 0;
	END_CASE


END_IF
//Reset seq
IF ipXPlanarPLC.Disabled THEN
	nSeqStation1 := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Example_ExternalSetpoint_MoveToExactStationCoordinates" Id="{ce45c26b-0642-437b-b80f-2e7c7e49fed9}">
      <Declaration><![CDATA[METHOD Example_ExternalSetpoint_MoveToExactStationCoordinates : BOOL
VAR
	ipThisStation : I_XP_Station_PLC;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* A station has an X/Y coordinate on the track and an assigned track. 
   As this coordinate is not always on a track (especially tricky in the curve), the station is moved to the coordinate that is closest to the track.
   However, if the mover needs to move to the exact original position, regardless of the track, the mover can use this sequence to move to this point.
*)
ipThisStation := ipXPlanarPLC.Station(S_OUTFEED1);

//Set this variable to run external setpoint example
IF bExternalSetpointExample2 AND ipThisStation <> 0 THEN
	
	//fix 1 Movers are used in example
	ipThisStation.MoverQueueSize := 1;
	//Switch off simulation in Station 2
	ipThisStation.SimulationStop();
	
	CASE nSeqStation2 OF	
		0: //Wait for Mover
			IF ipThisStation.MoversInPlace THEN
				//Get interface to mover
				ipMoverExample2 := ipThisStation.MoversInQueue[0];
				nSeqStation2 := nSeqStation2 + 1;
			END_IF
			
		1: //Start External Setpoint (Relative Mode). PowerOn all 6 simulationaxis if linked
			ipMoverExample2.StartExternalSetpoint();
			nSeqStation2 := nSeqStation2 + 1;
		
		2: //Wait for feedback
			IF ipMoverExample2.Feedback.Done THEN
				nSeqStation2 := nSeqStation2 + 1;
			END_IF
			
		3: 	//Target position (position next to track) - Actual position (position on the track)
			fPositionOffsetX := (ipThisStation.PositionXY.x - ipThisStation.PositionOnTrackXY.x);
			fPositionOffsetY := (ipThisStation.PositionXY.y - ipThisStation.PositionOnTrackXY.y);
			
			ipMoverExample2.AxisExtSetpointX.MoveAbsolute(fPosition := fPositionOffsetX,0,0,0,0,0);
			ipMoverExample2.AxisExtSetpointY.MoveAbsolute(fPosition := fPositionOffsetY,0,0,0,0,0);

			nSeqStation2 := nSeqStation2 + 1;
			
		4: //Wait for feedback
			IF ipMoverExample2.AxisExtSetpointX.Feedback.Done AND ipMoverExample2.AxisExtSetpointY.Feedback.Done THEN
				nSeqStation2 := nSeqStation2 + 1;
			END_IF	
			
		5: //Mover is in station. Process could do something here
			nSeqStation2 := nSeqStation2 + 1;
			
		6: //Move back to track
			ipMoverExample2.AxisExtSetpointX.MoveAbsolute(fPosition := 0,0,0,0,0,0);
			ipMoverExample2.AxisExtSetpointY.MoveAbsolute(fPosition := 0,0,0,0,0,0);
			nSeqStation2 := nSeqStation2 + 1;
		
		7: //Wait for finishing movement
			IF ipMoverExample2.AxisExtSetpointX.Feedback.Done AND ipMoverExample2.AxisExtSetpointY.Feedback.Done THEN
				nSeqStation2 := nSeqStation2 + 1;
			END_IF
			
		
		8: //Stop external setpoint mode
			ipMoverExample2.StopExternalSetpoint();
			nSeqStation2 := nSeqStation2 + 1;
			
		9: //Wait for feedback
			IF ipMoverExample2.Feedback.Done THEN
				nSeqStation2 := nSeqStation2 + 1;
			END_IF		

			
		10: //Finish. Send Mover in next Station
			ipThisStation.SendMoversToStation(G_INFEED);
			nSeqStation2 := 0;
	END_CASE


END_IF
//Reset seq
IF ipXPlanarPLC.Disabled THEN
	nSeqStation2 := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Example_ManualConfigTrack" Id="{6aa3b8a8-a905-473e-81e8-375f53092929}">
      <Declaration><![CDATA[METHOD Example_ManualConfigTrack : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Instead of the track being initialized in the track object, 
   the track progression can also be set here in the PLC. 
   To change values in the PLC, the track must be disabled (system is disabled) and the value to be changed must not be described in the object. 
*)
IF bDoConfigTrackC AND ipXPlanarPLC.Disabled THEN
	CASE nSeqConfigTrack OF
		0: //Clears the geometric information of the Planar Track.
			fbTrackC.PlanarTrack.Clear(fbTrackFeedback);
			nSeqConfigTrack := nSeqConfigTrack + 1;
		
		1: //Wait for command finished successfully
			IF fbTrackFeedback.Done THEN
				nSeqConfigTrack := nSeqConfigTrack + 1;
			END_IF
			
		2: //Sets the other Planar Tracks endpoint as start point of this Planar Track, transition is smooth. The other Planar Track is blocked for further changes (until it is cleared).
			fbTrackC.PlanarTrack.StartFromTrack(track := fbTrackA.PlanarTrack, commandFeedback := fbTrackFeedback);
			nSeqConfigTrack := nSeqConfigTrack + 1;
		
		3: //Wait for command finished successfully
			IF fbTrackFeedback.Done THEN
				nSeqConfigTrack := nSeqConfigTrack + 1;
			END_IF
			
		4: //Appends a line to the Planar Track.
			posStart.SetValuesXYC(840,480,0);
			posEnd.SetValuesXYC(840,240,0);
			fbTrackC.PlanarTrack.AppendLine(start := posStart, end := posEnd, commandFeedback := fbTrackFeedback);
			nSeqConfigTrack := nSeqConfigTrack + 1;					

		5: //Wait for command finished successfully
			IF fbTrackFeedback.Done THEN
				nSeqConfigTrack := nSeqConfigTrack + 1;
			END_IF
			
		6: //Appends a smooth transition from the end of this Planar Track to the other Planar Tracks start point. The Planar Track is blocked for further changes (until it is cleared).
			fbTrackC.PlanarTrack.EndAtTrack(track := fbTrackA.PlanarTrack, commandFeedback := fbTrackFeedback);
			nSeqConfigTrack := nSeqConfigTrack + 1;
		
		7: //Wait for command finished successfully
			IF fbTrackFeedback.Done THEN
				nSeqConfigTrack := nSeqConfigTrack + 1;
			END_IF		
		
		8: //Done
			bDoConfigTrackC := FALSE;
			nSeqConfigTrack := 0;
	END_CASE
	fbTrackFeedback.Update(); 
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Example_ManualInteractionWithProcess" Id="{12917afb-6060-4e99-96e0-b290ae99ad1e}">
      <Declaration><![CDATA[METHOD Example_ManualInteractionWithProcess : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Example: Interaction with process outside XPlanar 
   only works when the simulation is switched off
*)

//Requestet cts of mover are in station. Example: rototer can start to place prodcts
bToUpstreamProcessCanStart := ipXPlanarPLC.Station(S_INFEED1).MoversInPlace;

//The upstream process can set this bool if the process is finish and the mover can leave the station
bFromUpsreamProcessIsFinish := bFromUpsreamProcessIsFinish;

//The Upstream can chose where the movers should go next
//A group is specified here that contains several different. equivalent stations
sFromUpstreamTagedStation := G_OUTFEED;

IF bFromUpsreamProcessIsFinish AND bToUpstreamProcessCanStart AND ipXPlanarPLC.Enabled THEN
	bFromUpsreamProcessIsFinish := FALSE;
	ipXPlanarPLC.Station(S_INFEED1).SendMoversToStation(sFromUpstreamTagedStation);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Example_SimulationMode" Id="{b3a32842-fad6-4345-9762-703a0dd1aab5}">
      <Declaration><![CDATA[METHOD Example_SimulationMode : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Each station has a "Ready to recive Mover" property. 
   This BOOL can be used to control whether the station should continue to be moved to *)
ipXPlanarPLC.Station(S_INFEED1).ReadyToRecvMovers 	:= bStation1_Ready;
ipXPlanarPLC.Station(S_OUTFEED1).ReadyToRecvMovers 	:= bStation2_Ready;
ipXPlanarPLC.Station(S_OUTFEED2).ReadyToRecvMovers 	:= bStation3_Ready;





// Configure and Start Simulation
fbRTriggerSimulation(CLK := bSimulation);
IF fbRTriggerSimulation.Q THEN
	//xPlanarPLC.SuppressAllDynamicsChanges := FALSE;	//Enable to adjust Gap + Dynamic depending on Station
	ipXPlanarPLC.Station(S_INFEED1).SimulationStart(fProcessDuration := 2.0, 	sTargedStation := G_OUTFEED);
	ipXPlanarPLC.Station(S_OUTFEED1).SimulationStart(fProcessDuration := 1.5, 	sTargedStation := G_INFEED);
	ipXPlanarPLC.Station(S_OUTFEED2).SimulationStart(fProcessDuration := 1.5, 	sTargedStation := G_INFEED);
END_IF

// Stop Simulation
fbFTriggerSimulation(CLK := bSimulation);
IF fbFTriggerSimulation.Q THEN
	ipXPlanarPLC.Station(S_INFEED1).SimulationStop();
	ipXPlanarPLC.Station(S_OUTFEED1).SimulationStop();
	ipXPlanarPLC.Station(S_OUTFEED2).SimulationStop();
END_IF


]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>