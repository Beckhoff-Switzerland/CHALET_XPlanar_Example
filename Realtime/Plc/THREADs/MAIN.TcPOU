<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.12">
  <POU Name="MAIN" Id="{0d5726c6-96bf-43b9-ad37-581c6a412de7}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR CONSTANT
	cCtsXpMovers : UINT := 3;	
	cCtsXpTracks : UINT := 6;	
	//Unique station identification 
	S_INFEED1 	: STRING := 'Station A';
	S_OUTFEED1 	: STRING := 'Station D';
	//Groupe station identification 
	G_PROCESS	: STRING := 'Groupe Process';
END_VAR
VAR
	bInitDone 			: BOOL;
	bEnable				: BOOL;
	bDisable, bReset	: BOOL;
	bSetSettings 		: BOOL := TRUE;
	
	(* XPlanar System - 1 per associated XPlanar 
		The system is the container and organizer for all subsequent XPlanar objects. All objects are registered with this system*)
	fbXpSystem : FB_XP_System;
	ipXPlanarPLC : I_XP_System_PLC := fbXpSystem; 
	
	(* XPlanar Collision Avoidance Groupe - 1 per associated XPlanar 
		The Planar group is a software object that prevents collisions between Planar movers as well as collisions of Planar movers with the boundary of 
		the stator area on the two-dimensional XPlanar stator area. To do this, the 2D areas of all objects in the group are blocked. When a motion command 
		is transferred to a mover, the required area is requested from the Planar group and the motion command is rejected if this area would collide 
		with already reserved areas. If the motion command can be executed, the area is added to the set of reserved area and blocked accordingly. *)
	fbXpGroup : FB_XP_Group
									(ipSystem			:= fbXpSystem);
	(* XPlanar Environment - 1 per associated XPlanar 
		The Planar environment is a software object that represents the two-dimensional XPlanar stator surface. Together with Planar movers in a group, 
		it prevents collisions of the movers with the edge of the surface. *)
	fbXpEnvironment : FB_XP_Environment
									(ipSystem			:= fbXpSystem);	
	
	(* XPlanar mover - n per associated XPlanar. Can be instantiated as an array and/or individually
		The Planar mover is a software object that represents an XPlanar mover. It summarizes the state of the real mover (position, velocity, etc.) 
		for the user. In addition, the user has the possibility to influence or control the state of the real mover via the Planar mover. *)								
	aMovers : ARRAY[1..cCtsXpMovers] OF FB_XP_Mover[
								 	(ipSystem			:= fbXpSystem),
								 	(ipSystem			:= fbXpSystem),
								 	(ipSystem			:= fbXpSystem)];

	(* XPlanar track - n per associated XPlanar. Can be instantiated as an array and/or individually
		The Planar track is a software object that represents a (virtual) one-dimensional path on the two-dimensional XPlanar stator surface. 
		Several Planar movers can be lined up and moved on this path. Collisions are prevented by keeping a preset distance between the movers. *)		
	aTracks : ARRAY[1..cCtsXpTracks] OF FB_XP_Track[
								 	(ipSystem			:= fbXpSystem),
								 	(ipSystem			:= fbXpSystem),
								 	(ipSystem			:= fbXpSystem),
								 	(ipSystem			:= fbXpSystem),
								 	(ipSystem			:= fbXpSystem),
								 	(ipSystem			:= fbXpSystem)];

	(* XPlanar station - n per associated XPlanar. Can be instantiated as an array and/or individually
		The stations are the main component of the application. As soon as the system has been started up and all movers are on the track, the movers are only sent from one station to the next.
		Parameters:
			xPos, yPos 			= Absolute position of the station on the xPlanar.
			ipAccocietedTrack 	= The track on which the station is located. If the XY position is not on this track, the next possible track position is assumed on this track.
								  Can be set to 0. In this case, the closest track to the coordinates is automatically used. 
								  If the station is very close to a transition, it may still be interesting to enter the exact track here.		
			sUniqueName 		= Unique name that may only exist once.
			sTargetGroup 		= A name for a group to which this station belongs. Important for redundant stations	*)	
	fbStationA : FB_XP_Station(ipSystem 			:= fbXpSystem,
									ipAccocietedTrack 	:= 0,// =closest track
									sUniqueName			:= S_INFEED1,
									sTargetGroup		:= '',
									nMoverQueueSize		:= 1,
									xPos				:= 100,
									yPos				:= 540);
									
	fbStationB 		: FB_XP_Station(ipSystem 			:= fbXpSystem,
									ipAccocietedTrack 	:= 0, // =closest track
									sUniqueName 		:= '',
									sTargetGroup		:= G_PROCESS,
									nMoverQueueSize		:= 1,
									xPos				:= 600,
									yPos				:= 600);	
		
	fbStationC 		: FB_XP_Station(ipSystem 			:= fbXpSystem,
									ipAccocietedTrack 	:= 0, // =closest track
									sUniqueName 		:= '',
									sTargetGroup		:= G_PROCESS,
									nMoverQueueSize		:= 1,
									xPos				:= 600,
									yPos				:= 120);						
										
	fbStationD 		: FB_XP_Station(ipSystem 			:= fbXpSystem,
									ipAccocietedTrack 	:= 0, // =closest track
									sUniqueName 		:= S_OUTFEED1,
									sTargetGroup		:= '',
									nMoverQueueSize		:= 2,
									xPos				:= 120,
									yPos				:= 400);	
											
	fbStationD_ChangeGap 		: FB_XP_Station(ipSystem := fbXpSystem,
									ipAccocietedTrack 	:= 0, // =closest track
									sUniqueName 		:= '',
									sTargetGroup		:= '',
									nMoverQueueSize		:= 1,
									xPos				:= 188,//120,125
									yPos				:= 90);						
													
	(*Processing station*)								
	fbStationCLowerZ : FB_Station_LowerZForce(ipStation := fbStationC);	
	fbStationBExternalSetpoint : FB_Station_ExternalSetpoint(ipStation := fbStationB);							
									
	(* EtherCAt diagnostics - TC3_Eventlogger
	This function block instance scans the entire EtherCat master. 
	Each EtherCat slave device is recognized and a message is written to the TC3_Eventlogger as soon as an unwanted state occurs.*)
	//	fbEtherCatDiagLAN3 : FB_EtherCatMasterDiag;
	//	fbEtherCatDiagLAN4 : FB_EtherCatMasterDiag;
END_VAR

//Example ConfigTrack
VAR
	bDoConfigTrackC 		: BOOL := TRUE;
	nSeqConfigTrack 		: UINT;
	fbTrackFeedback 		: MC_PlanarFeedback;	
	posStart, posEnd 		: PositionXYC; 
END_VAR

//Example SimulationMode
VAR
	bStartSimulation,bStopSimulation : BOOL;
END_VAR

//Example Manual Interaction with process outside XPlanar
VAR
	bToUpstreamProcessCanStart 		: BOOL; //Requestet cts of mover are in station. Example: rototer can start to place prodcts
	bFromUpsreamProcessIsFinish 	: BOOL; //The upstream process can set this bool if the process is finish and the mover can leave the station
	sFromUpstreamTagedStation		: STRING; //The Upstream can chose where the movers should go next
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInitDone THEN
 	ipXPlanarPLC.Initialize();
	bInitDone := ipXPlanarPLC.Initialized;
	RETURN;
END_IF

IF bEnable AND ipXPlanarPLC.Disabled THEN
	bEnable := FALSE;
	ipXPlanarPLC.Enable();
	bSetSettings := TRUE; // Write Settings once
END_IF

IF bDisable OR bReset THEN
	bDisable := FALSE; bReset := FALSE;
	ipXPlanarPLC.Disable();
END_IF

IF bStartSimulation AND ipXPlanarPLC.Enabled THEN
	bStartSimulation := FALSE;
	fbStationA.SimulationStart(fProcessDuration := 0.1, sTargetStation := G_PROCESS); //Groupe
	fbStationD.SimulationStart(fProcessDuration := 0.5, sTargetStation := S_INFEED1); //Exact Station
	
	//fbStationB.SimulationStart(fProcessDuration := 1.0, sTargetStation := S_OUTFEED1); 
	fbStationBExternalSetpoint.TargetStation := S_OUTFEED1;	
	
	//fbStationC.SimulationStart(fProcessDuration := 1.0, sTargetStation := S_OUTFEED1);
	fbStationCLowerZ.TargetStation := S_OUTFEED1;
END_IF

IF bStopSimulation THEN
	bStopSimulation := FALSE;
	fbStationA.SimulationStop();
	fbStationB.SimulationStop();
	fbStationC.SimulationStop();
	fbStationD.SimulationStop();
END_IF


//Calculate setting each cycle
IF ipXPlanarPLC.Enabled THEN
	//Movement to the station is only permitted if the track is free. 
	//This serves to prevent collisions as only the gap is not sufficient here
	fbStationB.ReadyToRecvMovers := fbStationB.AccocietedTrack.CtsMoversOnTrack = 0;
	fbStationC.ReadyToRecvMovers := fbStationC.AccocietedTrack.CtsMoversOnTrack = 0;
ELSE
	fbStationB.ReadyToRecvMovers := FALSE;
	fbStationC.ReadyToRecvMovers := FALSE;
END_IF


//Do settings once at eanbling
IF bSetSettings THEN
	bSetSettings := FALSE;
	
	//TODO: The very first time the system is started up, the mover does not yet have a target. 
	//The default target defined in the CHALET_Xplanar/parameter list is entered. You should adjust the defaulttrged 

	//Set Mover Velocity, Acc, Dec, Jerk once. The station will override this settings
	aMovers[1].SetDynConstraint_Path(200,1900,1900,20000);
	aMovers[2].SetDynConstraint_Path(200,1900,1900,20000);
	aMovers[3].SetDynConstraint_Path(200,1900,1900,20000);
	
	//"In Position" is set 5mm earlier
	fbStationA.TargetPosWindow := 5.0;
	
	//The mover gets this targed gap asson he leves the station
	fbStationA.MoverGapAtExit := 300.0;
	fbStationD_ChangeGap.MoverGapAtExit := 190.0;
	
	fbStationB.MoverVelocityAtExit := 2000;	
	fbStationB.MoverAccAtExit := MC_MAXIMUM;
	fbStationB.MoverDecAtExit := MC_MAXIMUM;
	
	fbStationC.MoverVelocityAtExit := 2000;	
	fbStationC.MoverAccAtExit := MC_DEFAULT;
END_IF


PRG_Example_ProductData_Simple();


(* Update is called at the end of the program *)
ipXPlanarPLC.Update();
fbStationCLowerZ.Update();
fbStationBExternalSetpoint.Update();
//fbEtherCatDiagLAN3.Update();
//fbEtherCatDiagLAN4.Update();
]]></ST>
    </Implementation>
    <Method Name="Example_ManualConfigTrack" Id="{6aa3b8a8-a905-473e-81e8-375f53092929}">
      <Declaration><![CDATA[METHOD Example_ManualConfigTrack : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Instead of the track being initialized in the track object, 
   the track progression can also be set here in the PLC. 
   To change values in the PLC, the track must be disabled (system is disabled) and the value to be changed must not be described in the object. 
*)
IF bDoConfigTrackC AND xPlanarPLC.Disabled THEN
	CASE nSeqConfigTrack OF
		0: //Clears the geometric information of the Planar Track.
			fbTrackC.PlanarTrack.Clear(fbTrackFeedback);
			nSeqConfigTrack := nSeqConfigTrack + 1;
		
		1: //Wait for command finished successfully
			IF fbTrackFeedback.Done THEN
				nSeqConfigTrack := nSeqConfigTrack + 1;
			END_IF
			
		2: //Sets the other Planar Tracks endpoint as start point of this Planar Track, transition is smooth. The other Planar Track is blocked for further changes (until it is cleared).
			fbTrackC.PlanarTrack.StartFromTrack(track := fbTrackA.PlanarTrack, commandFeedback := fbTrackFeedback);
			nSeqConfigTrack := nSeqConfigTrack + 1;
		
		3: //Wait for command finished successfully
			IF fbTrackFeedback.Done THEN
				nSeqConfigTrack := nSeqConfigTrack + 1;
			END_IF
			
		4: //Appends a line to the Planar Track.
			posStart.SetValuesXYC(840,480,0);
			posEnd.SetValuesXYC(840,240,0);
			fbTrackC.PlanarTrack.AppendLine(start := posStart, end := posEnd, commandFeedback := fbTrackFeedback);
			nSeqConfigTrack := nSeqConfigTrack + 1;					

		5: //Wait for command finished successfully
			IF fbTrackFeedback.Done THEN
				nSeqConfigTrack := nSeqConfigTrack + 1;
			END_IF
			
		6: //Appends a smooth transition from the end of this Planar Track to the other Planar Tracks start point. The Planar Track is blocked for further changes (until it is cleared).
			fbTrackC.PlanarTrack.EndAtTrack(track := fbTrackA.PlanarTrack, commandFeedback := fbTrackFeedback);
			nSeqConfigTrack := nSeqConfigTrack + 1;
		
		7: //Wait for command finished successfully
			IF fbTrackFeedback.Done THEN
				nSeqConfigTrack := nSeqConfigTrack + 1;
			END_IF		
		
		8: //Done
			bDoConfigTrackC := FALSE;
			nSeqConfigTrack := 0;
	END_CASE
	fbTrackFeedback.Update(); 
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Example_ManualInteractionWithProcess" Id="{12917afb-6060-4e99-96e0-b290ae99ad1e}">
      <Declaration><![CDATA[METHOD Example_ManualInteractionWithProcess : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Example: Interaction with process outside XPlanar 
   only works when the simulation is switched off
*)

//Requestet cts of mover are in station. Example: rototer can start to place prodcts
bToUpstreamProcessCanStart := xPlanarPLC.Station(S_INFEED1).MoversInPlace;

//The upstream process can set this bool if the process is finish and the mover can leave the station
bFromUpsreamProcessIsFinish := bFromUpsreamProcessIsFinish;

//The Upstream can chose where the movers should go next
//A group is specified here that contains several different. equivalent stations
sFromUpstreamTagedStation := G_OUTFEED;

IF bFromUpsreamProcessIsFinish AND bToUpstreamProcessCanStart AND xPlanarPLC.Enabled THEN
	bFromUpsreamProcessIsFinish := FALSE;
	xPlanarPLC.Station(S_INFEED1).SendMoversToStation(sFromUpstreamTagedStation);
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>